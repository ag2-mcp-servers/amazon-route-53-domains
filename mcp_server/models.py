# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:26:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccountId(RootModel[constr(pattern=r'^(\d{12})$', min_length=12, max_length=12)]):
    root: constr(pattern=r'^(\d{12})$', min_length=12, max_length=12)


class AddressLine(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class Boolean(RootModel[bool]):
    root: bool


class City(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class ContactName(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class ContactNumber(RootModel[constr(max_length=30)]):
    root: constr(max_length=30)


class ContactType(Enum):
    PERSON = 'PERSON'
    COMPANY = 'COMPANY'
    ASSOCIATION = 'ASSOCIATION'
    PUBLIC_BODY = 'PUBLIC_BODY'
    RESELLER = 'RESELLER'


class CountryCode(Enum):
    AC = 'AC'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AN = 'AN'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AX = 'AX'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BV = 'BV'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CU = 'CU'
    CV = 'CV'
    CW = 'CW'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    EH = 'EH'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HM = 'HM'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IO = 'IO'
    IQ = 'IQ'
    IR = 'IR'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MF = 'MF'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MQ = 'MQ'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NF = 'NF'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PS = 'PS'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    SS = 'SS'
    ST = 'ST'
    SV = 'SV'
    SX = 'SX'
    SY = 'SY'
    SZ = 'SZ'
    TC = 'TC'
    TD = 'TD'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TP = 'TP'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class Currency(RootModel[constr(min_length=3, max_length=3)]):
    root: constr(min_length=3, max_length=3)


class CurrentExpiryYear(RootModel[int]):
    root: int


class DNSSec(RootModel[str]):
    root: str


class DeleteTagsForDomainResponse(BaseModel):
    pass


class DisableDomainAutoRenewResponse(BaseModel):
    pass


class DnssecLimitExceeded(RootModel[Any]):
    root: Any


class DnssecPublicKey(RootModel[constr(max_length=32768)]):
    root: constr(max_length=32768)


class DomainAuthCode(RootModel[SecretStr]):
    root: SecretStr


class DomainAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    AVAILABLE_RESERVED = 'AVAILABLE_RESERVED'
    AVAILABLE_PREORDER = 'AVAILABLE_PREORDER'
    UNAVAILABLE = 'UNAVAILABLE'
    UNAVAILABLE_PREMIUM = 'UNAVAILABLE_PREMIUM'
    UNAVAILABLE_RESTRICTED = 'UNAVAILABLE_RESTRICTED'
    RESERVED = 'RESERVED'
    DONT_KNOW = 'DONT_KNOW'


class DomainLimitExceeded(RootModel[Any]):
    root: Any


class DomainName(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class DomainPriceName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DomainStatus(RootModel[str]):
    root: str


class DomainStatusList(RootModel[List[DomainStatus]]):
    root: List[DomainStatus]


class DuplicateRequest(RootModel[Any]):
    root: Any


class DurationInYears(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class Email(RootModel[constr(max_length=254)]):
    root: constr(max_length=254)


class EnableDomainAutoRenewRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class EnableDomainAutoRenewResponse(BaseModel):
    pass


class EnableDomainTransferLockRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class ErrorMessage(RootModel[str]):
    root: str


class ExtraParamName(Enum):
    DUNS_NUMBER = 'DUNS_NUMBER'
    BRAND_NUMBER = 'BRAND_NUMBER'
    BIRTH_DEPARTMENT = 'BIRTH_DEPARTMENT'
    BIRTH_DATE_IN_YYYY_MM_DD = 'BIRTH_DATE_IN_YYYY_MM_DD'
    BIRTH_COUNTRY = 'BIRTH_COUNTRY'
    BIRTH_CITY = 'BIRTH_CITY'
    DOCUMENT_NUMBER = 'DOCUMENT_NUMBER'
    AU_ID_NUMBER = 'AU_ID_NUMBER'
    AU_ID_TYPE = 'AU_ID_TYPE'
    CA_LEGAL_TYPE = 'CA_LEGAL_TYPE'
    CA_BUSINESS_ENTITY_TYPE = 'CA_BUSINESS_ENTITY_TYPE'
    CA_LEGAL_REPRESENTATIVE = 'CA_LEGAL_REPRESENTATIVE'
    CA_LEGAL_REPRESENTATIVE_CAPACITY = 'CA_LEGAL_REPRESENTATIVE_CAPACITY'
    ES_IDENTIFICATION = 'ES_IDENTIFICATION'
    ES_IDENTIFICATION_TYPE = 'ES_IDENTIFICATION_TYPE'
    ES_LEGAL_FORM = 'ES_LEGAL_FORM'
    FI_BUSINESS_NUMBER = 'FI_BUSINESS_NUMBER'
    FI_ID_NUMBER = 'FI_ID_NUMBER'
    FI_NATIONALITY = 'FI_NATIONALITY'
    FI_ORGANIZATION_TYPE = 'FI_ORGANIZATION_TYPE'
    IT_NATIONALITY = 'IT_NATIONALITY'
    IT_PIN = 'IT_PIN'
    IT_REGISTRANT_ENTITY_TYPE = 'IT_REGISTRANT_ENTITY_TYPE'
    RU_PASSPORT_DATA = 'RU_PASSPORT_DATA'
    SE_ID_NUMBER = 'SE_ID_NUMBER'
    SG_ID_NUMBER = 'SG_ID_NUMBER'
    VAT_NUMBER = 'VAT_NUMBER'
    UK_CONTACT_TYPE = 'UK_CONTACT_TYPE'
    UK_COMPANY_NUMBER = 'UK_COMPANY_NUMBER'
    EU_COUNTRY_OF_CITIZENSHIP = 'EU_COUNTRY_OF_CITIZENSHIP'
    AU_PRIORITY_TOKEN = 'AU_PRIORITY_TOKEN'


class ExtraParamValue(RootModel[SecretStr]):
    root: SecretStr


class FIAuthKey(RootModel[SecretStr]):
    root: SecretStr


class GetContactReachabilityStatusRequest(BaseModel):
    domainName: Optional[DomainName] = None


class GetDomainDetailRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class GlueIp(RootModel[constr(max_length=45)]):
    root: constr(max_length=45)


class GlueIpList(RootModel[List[GlueIp]]):
    root: List[GlueIp]


class HostName(RootModel[constr(pattern=r'[a-zA-Z0-9_\-.]*', max_length=255)]):
    root: constr(pattern=r'[a-zA-Z0-9_\-.]*', max_length=255)


class Integer(RootModel[int]):
    root: int


class InvalidInput(RootModel[Any]):
    root: Any


class InvoiceId(RootModel[str]):
    root: str


class Label(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class LangCode(RootModel[constr(max_length=3)]):
    root: constr(max_length=3)


class ListDomainsAttributeName(Enum):
    DomainName = 'DomainName'
    Expiry = 'Expiry'


class ListOperationsSortAttributeName(Enum):
    SubmittedDate = 'SubmittedDate'


class ListTagsForDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class Nameserver(BaseModel):
    GlueIps: Optional[GlueIpList] = None
    Name: HostName


class NameserverList(RootModel[List[Nameserver]]):
    root: List[Nameserver]


class NullableInteger(RootModel[int]):
    root: int


class OperationId(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class OperationLimitExceeded(RootModel[Any]):
    root: Any


class OperationStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    ERROR = 'ERROR'
    SUCCESSFUL = 'SUCCESSFUL'
    FAILED = 'FAILED'


class OperationStatusList(RootModel[List[OperationStatus]]):
    root: List[OperationStatus] = Field(..., max_length=5)


class OperationType(Enum):
    REGISTER_DOMAIN = 'REGISTER_DOMAIN'
    DELETE_DOMAIN = 'DELETE_DOMAIN'
    TRANSFER_IN_DOMAIN = 'TRANSFER_IN_DOMAIN'
    UPDATE_DOMAIN_CONTACT = 'UPDATE_DOMAIN_CONTACT'
    UPDATE_NAMESERVER = 'UPDATE_NAMESERVER'
    CHANGE_PRIVACY_PROTECTION = 'CHANGE_PRIVACY_PROTECTION'
    DOMAIN_LOCK = 'DOMAIN_LOCK'
    ENABLE_AUTORENEW = 'ENABLE_AUTORENEW'
    DISABLE_AUTORENEW = 'DISABLE_AUTORENEW'
    ADD_DNSSEC = 'ADD_DNSSEC'
    REMOVE_DNSSEC = 'REMOVE_DNSSEC'
    EXPIRE_DOMAIN = 'EXPIRE_DOMAIN'
    TRANSFER_OUT_DOMAIN = 'TRANSFER_OUT_DOMAIN'
    CHANGE_DOMAIN_OWNER = 'CHANGE_DOMAIN_OWNER'
    RENEW_DOMAIN = 'RENEW_DOMAIN'
    PUSH_DOMAIN = 'PUSH_DOMAIN'
    INTERNAL_TRANSFER_OUT_DOMAIN = 'INTERNAL_TRANSFER_OUT_DOMAIN'
    INTERNAL_TRANSFER_IN_DOMAIN = 'INTERNAL_TRANSFER_IN_DOMAIN'


class OperationTypeList(RootModel[List[OperationType]]):
    root: List[OperationType] = Field(..., max_length=18)


class Operator(Enum):
    LE = 'LE'
    GE = 'GE'
    BEGINS_WITH = 'BEGINS_WITH'


class PageMarker(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class PageMaxItems(RootModel[conint(le=100)]):
    root: conint(le=100)


class Price(RootModel[float]):
    root: float


class PriceWithCurrency(BaseModel):
    Currency_1: Currency = Field(..., alias='Currency')
    Price_1: Price = Field(..., alias='Price')


class PushDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Target: Label


class ReachabilityStatus(Enum):
    PENDING = 'PENDING'
    DONE = 'DONE'
    EXPIRED = 'EXPIRED'


class RegisterDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class RegistrarName(RootModel[str]):
    root: str


class RegistrarUrl(RootModel[str]):
    root: str


class RegistrarWhoIsServer(RootModel[str]):
    root: str


class RegistryDomainId(RootModel[str]):
    root: str


class RejectDomainTransferFromAnotherAwsAccountRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class RejectDomainTransferFromAnotherAwsAccountResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class RenewDomainRequest(BaseModel):
    CurrentExpiryYear_1: CurrentExpiryYear = Field(..., alias='CurrentExpiryYear')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    DurationInYears_1: Optional[DurationInYears] = Field(None, alias='DurationInYears')


class RenewDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class Reseller(RootModel[str]):
    root: str


class ResendContactReachabilityEmailRequest(BaseModel):
    domainName: Optional[DomainName] = None


class ResendContactReachabilityEmailResponse(BaseModel):
    domainName: Optional[DomainName] = None
    emailAddress: Optional[Email] = None
    isAlreadyVerified: Optional[Boolean] = None


class ResendOperationAuthorizationRequest(BaseModel):
    OperationId_1: OperationId = Field(..., alias='OperationId')


class RetrieveDomainAuthCodeRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class RetrieveDomainAuthCodeResponse(BaseModel):
    AuthCode: Optional[DomainAuthCode] = None


class SortOrder(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class State(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class StatusFlag(Enum):
    PENDING_ACCEPTANCE = 'PENDING_ACCEPTANCE'
    PENDING_CUSTOMER_ACTION = 'PENDING_CUSTOMER_ACTION'
    PENDING_AUTHORIZATION = 'PENDING_AUTHORIZATION'
    PENDING_PAYMENT_VERIFICATION = 'PENDING_PAYMENT_VERIFICATION'
    PENDING_SUPPORT_CASE = 'PENDING_SUPPORT_CASE'


class String(RootModel[str]):
    root: str


class TLDRulesViolation(RootModel[Any]):
    root: Any


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class Timestamp(RootModel[datetime]):
    root: datetime


class TldName(RootModel[constr(min_length=2, max_length=255)]):
    root: constr(min_length=2, max_length=255)


class TransferDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class TransferDomainToAnotherAwsAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    DomainName_1: DomainName = Field(..., alias='DomainName')


class TransferDomainToAnotherAwsAccountResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')
    Password: Optional[String] = None


class Transferable(Enum):
    TRANSFERABLE = 'TRANSFERABLE'
    UNTRANSFERABLE = 'UNTRANSFERABLE'
    DONT_KNOW = 'DONT_KNOW'
    DOMAIN_IN_OWN_ACCOUNT = 'DOMAIN_IN_OWN_ACCOUNT'
    DOMAIN_IN_ANOTHER_ACCOUNT = 'DOMAIN_IN_ANOTHER_ACCOUNT'
    PREMIUM_DOMAIN = 'PREMIUM_DOMAIN'


class UnsupportedTLD(RootModel[Any]):
    root: Any


class UpdateDomainContactPrivacyRequest(BaseModel):
    AdminPrivacy: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    RegistrantPrivacy: Optional[Boolean] = None
    TechPrivacy: Optional[Boolean] = None


class UpdateDomainContactPrivacyResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdateDomainContactResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdateDomainNameserversRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FIAuthKey_1: Optional[FIAuthKey] = Field(None, alias='FIAuthKey')
    Nameservers: NameserverList


class UpdateDomainNameserversResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdateTagsForDomainResponse(BaseModel):
    pass


class Value(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Values(RootModel[List[Value]]):
    root: List[Value] = Field(..., max_length=1, min_length=1)


class ViewBillingRequest(BaseModel):
    End: Optional[Timestamp] = None
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None
    Start: Optional[Timestamp] = None


class ZipCode(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class XAmzTarget(Enum):
    Route53Domains_v20140515_AcceptDomainTransferFromAnotherAwsAccount = (
        'Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount'
    )


class XAmzTarget1(Enum):
    Route53Domains_v20140515_AssociateDelegationSignerToDomain = (
        'Route53Domains_v20140515.AssociateDelegationSignerToDomain'
    )


class XAmzTarget2(Enum):
    Route53Domains_v20140515_CancelDomainTransferToAnotherAwsAccount = (
        'Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount'
    )


class XAmzTarget3(Enum):
    Route53Domains_v20140515_CheckDomainAvailability = (
        'Route53Domains_v20140515.CheckDomainAvailability'
    )


class XAmzTarget4(Enum):
    Route53Domains_v20140515_CheckDomainTransferability = (
        'Route53Domains_v20140515.CheckDomainTransferability'
    )


class XAmzTarget5(Enum):
    Route53Domains_v20140515_DeleteDomain = 'Route53Domains_v20140515.DeleteDomain'


class XAmzTarget6(Enum):
    Route53Domains_v20140515_DeleteTagsForDomain = (
        'Route53Domains_v20140515.DeleteTagsForDomain'
    )


class XAmzTarget7(Enum):
    Route53Domains_v20140515_DisableDomainAutoRenew = (
        'Route53Domains_v20140515.DisableDomainAutoRenew'
    )


class XAmzTarget8(Enum):
    Route53Domains_v20140515_DisableDomainTransferLock = (
        'Route53Domains_v20140515.DisableDomainTransferLock'
    )


class XAmzTarget9(Enum):
    Route53Domains_v20140515_DisassociateDelegationSignerFromDomain = (
        'Route53Domains_v20140515.DisassociateDelegationSignerFromDomain'
    )


class XAmzTarget10(Enum):
    Route53Domains_v20140515_EnableDomainAutoRenew = (
        'Route53Domains_v20140515.EnableDomainAutoRenew'
    )


class XAmzTarget11(Enum):
    Route53Domains_v20140515_EnableDomainTransferLock = (
        'Route53Domains_v20140515.EnableDomainTransferLock'
    )


class XAmzTarget12(Enum):
    Route53Domains_v20140515_GetContactReachabilityStatus = (
        'Route53Domains_v20140515.GetContactReachabilityStatus'
    )


class XAmzTarget13(Enum):
    Route53Domains_v20140515_GetDomainDetail = (
        'Route53Domains_v20140515.GetDomainDetail'
    )


class XAmzTarget14(Enum):
    Route53Domains_v20140515_GetDomainSuggestions = (
        'Route53Domains_v20140515.GetDomainSuggestions'
    )


class XAmzTarget15(Enum):
    Route53Domains_v20140515_GetOperationDetail = (
        'Route53Domains_v20140515.GetOperationDetail'
    )


class XAmzTarget16(Enum):
    Route53Domains_v20140515_ListDomains = 'Route53Domains_v20140515.ListDomains'


class XAmzTarget17(Enum):
    Route53Domains_v20140515_ListOperations = 'Route53Domains_v20140515.ListOperations'


class XAmzTarget18(Enum):
    Route53Domains_v20140515_ListPrices = 'Route53Domains_v20140515.ListPrices'


class XAmzTarget19(Enum):
    Route53Domains_v20140515_ListTagsForDomain = (
        'Route53Domains_v20140515.ListTagsForDomain'
    )


class XAmzTarget20(Enum):
    Route53Domains_v20140515_PushDomain = 'Route53Domains_v20140515.PushDomain'


class XAmzTarget21(Enum):
    Route53Domains_v20140515_RegisterDomain = 'Route53Domains_v20140515.RegisterDomain'


class XAmzTarget22(Enum):
    Route53Domains_v20140515_RejectDomainTransferFromAnotherAwsAccount = (
        'Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount'
    )


class XAmzTarget23(Enum):
    Route53Domains_v20140515_RenewDomain = 'Route53Domains_v20140515.RenewDomain'


class XAmzTarget24(Enum):
    Route53Domains_v20140515_ResendContactReachabilityEmail = (
        'Route53Domains_v20140515.ResendContactReachabilityEmail'
    )


class XAmzTarget25(Enum):
    Route53Domains_v20140515_ResendOperationAuthorization = (
        'Route53Domains_v20140515.ResendOperationAuthorization'
    )


class XAmzTarget26(Enum):
    Route53Domains_v20140515_RetrieveDomainAuthCode = (
        'Route53Domains_v20140515.RetrieveDomainAuthCode'
    )


class XAmzTarget27(Enum):
    Route53Domains_v20140515_TransferDomain = 'Route53Domains_v20140515.TransferDomain'


class XAmzTarget28(Enum):
    Route53Domains_v20140515_TransferDomainToAnotherAwsAccount = (
        'Route53Domains_v20140515.TransferDomainToAnotherAwsAccount'
    )


class XAmzTarget29(Enum):
    Route53Domains_v20140515_UpdateDomainContact = (
        'Route53Domains_v20140515.UpdateDomainContact'
    )


class XAmzTarget30(Enum):
    Route53Domains_v20140515_UpdateDomainContactPrivacy = (
        'Route53Domains_v20140515.UpdateDomainContactPrivacy'
    )


class XAmzTarget31(Enum):
    Route53Domains_v20140515_UpdateDomainNameservers = (
        'Route53Domains_v20140515.UpdateDomainNameservers'
    )


class XAmzTarget32(Enum):
    Route53Domains_v20140515_UpdateTagsForDomain = (
        'Route53Domains_v20140515.UpdateTagsForDomain'
    )


class XAmzTarget33(Enum):
    Route53Domains_v20140515_ViewBilling = 'Route53Domains_v20140515.ViewBilling'


class AcceptDomainTransferFromAnotherAwsAccountRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Password: String


class AcceptDomainTransferFromAnotherAwsAccountResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class AssociateDelegationSignerToDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class BillingRecord(BaseModel):
    BillDate: Optional[Timestamp] = None
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    InvoiceId_1: Optional[InvoiceId] = Field(None, alias='InvoiceId')
    Operation: Optional[OperationType] = None
    Price_1: Optional[Price] = Field(None, alias='Price')


class BillingRecords(RootModel[List[BillingRecord]]):
    root: List[BillingRecord]


class CancelDomainTransferToAnotherAwsAccountRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class CancelDomainTransferToAnotherAwsAccountResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class CheckDomainAvailabilityRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    IdnLangCode: Optional[LangCode] = None


class CheckDomainAvailabilityResponse(BaseModel):
    Availability: Optional[DomainAvailability] = None


class CheckDomainTransferabilityRequest(BaseModel):
    AuthCode: Optional[DomainAuthCode] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')


class Consent(BaseModel):
    Currency_1: Currency = Field(..., alias='Currency')
    MaxPrice: Price


class DeleteDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DeleteDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DeleteTagsForDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    TagsToDelete: TagKeyList


class DisableDomainAutoRenewRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DisableDomainTransferLockRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DisableDomainTransferLockResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DisassociateDelegationSignerFromDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Id: String


class DisassociateDelegationSignerFromDomainResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DnssecKey(BaseModel):
    Algorithm: Optional[NullableInteger] = None
    Digest: Optional[String] = None
    DigestType: Optional[NullableInteger] = None
    Flags: Optional[NullableInteger] = None
    Id: Optional[String] = None
    KeyTag: Optional[NullableInteger] = None
    PublicKey: Optional[DnssecPublicKey] = None


class DnssecKeyList(RootModel[List[DnssecKey]]):
    root: List[DnssecKey]


class DnssecSigningAttributes(BaseModel):
    Algorithm: Optional[NullableInteger] = None
    Flags: Optional[NullableInteger] = None
    PublicKey: Optional[DnssecPublicKey] = None


class DomainPrice(BaseModel):
    ChangeOwnershipPrice: Optional[PriceWithCurrency] = None
    Name: Optional[DomainPriceName] = None
    RegistrationPrice: Optional[PriceWithCurrency] = None
    RenewalPrice: Optional[PriceWithCurrency] = None
    RestorationPrice: Optional[PriceWithCurrency] = None
    TransferPrice: Optional[PriceWithCurrency] = None


class DomainPriceList(RootModel[List[DomainPrice]]):
    root: List[DomainPrice]


class DomainSuggestion(BaseModel):
    Availability: Optional[String] = None
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')


class DomainSuggestionsList(RootModel[List[DomainSuggestion]]):
    root: List[DomainSuggestion]


class DomainSummary(BaseModel):
    AutoRenew: Optional[Boolean] = None
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    Expiry: Optional[Timestamp] = None
    TransferLock: Optional[Boolean] = None


class DomainSummaryList(RootModel[List[DomainSummary]]):
    root: List[DomainSummary]


class DomainTransferability(BaseModel):
    Transferable_1: Optional[Transferable] = Field(None, alias='Transferable')


class EnableDomainTransferLockResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class ExtraParam(BaseModel):
    Name: ExtraParamName
    Value: ExtraParamValue


class ExtraParamList(RootModel[List[ExtraParam]]):
    root: List[ExtraParam]


class FilterCondition(BaseModel):
    Name: ListDomainsAttributeName
    Operator_1: Operator = Field(..., alias='Operator')
    Values_1: Values = Field(..., alias='Values')


class FilterConditions(RootModel[List[FilterCondition]]):
    root: List[FilterCondition]


class GetContactReachabilityStatusResponse(BaseModel):
    domainName: Optional[DomainName] = None
    status: Optional[ReachabilityStatus] = None


class GetDomainSuggestionsRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    OnlyAvailable: Boolean
    SuggestionCount: Integer


class GetDomainSuggestionsResponse(BaseModel):
    SuggestionsList: Optional[DomainSuggestionsList] = None


class GetOperationDetailRequest(BaseModel):
    OperationId_1: OperationId = Field(..., alias='OperationId')


class GetOperationDetailResponse(BaseModel):
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    LastUpdatedDate: Optional[Timestamp] = None
    Message: Optional[ErrorMessage] = None
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')
    Status: Optional[OperationStatus] = None
    StatusFlag_1: Optional[StatusFlag] = Field(None, alias='StatusFlag')
    SubmittedDate: Optional[Timestamp] = None
    Type: Optional[OperationType] = None


class ListDomainsResponse(BaseModel):
    Domains: Optional[DomainSummaryList] = None
    NextPageMarker: Optional[PageMarker] = None


class ListOperationsRequest(BaseModel):
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None
    SortBy: Optional[ListOperationsSortAttributeName] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    Status: Optional[OperationStatusList] = None
    SubmittedSince: Optional[Timestamp] = None
    Type: Optional[OperationTypeList] = None


class ListPricesRequest(BaseModel):
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None
    Tld: Optional[TldName] = None


class ListPricesResponse(BaseModel):
    NextPageMarker: Optional[PageMarker] = None
    Prices: Optional[DomainPriceList] = None


class OperationSummary(BaseModel):
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    LastUpdatedDate: Optional[Timestamp] = None
    Message: Optional[ErrorMessage] = None
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')
    Status: Optional[OperationStatus] = None
    StatusFlag_1: Optional[StatusFlag] = Field(None, alias='StatusFlag')
    SubmittedDate: Optional[Timestamp] = None
    Type: Optional[OperationType] = None


class OperationSummaryList(RootModel[List[OperationSummary]]):
    root: List[OperationSummary]


class SortCondition(BaseModel):
    Name: ListDomainsAttributeName
    SortOrder_1: SortOrder = Field(..., alias='SortOrder')


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class UpdateTagsForDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    TagsToUpdate: Optional[TagList] = None


class ViewBillingResponse(BaseModel):
    BillingRecords_1: Optional[BillingRecords] = Field(None, alias='BillingRecords')
    NextPageMarker: Optional[PageMarker] = None


class AssociateDelegationSignerToDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    SigningAttributes: DnssecSigningAttributes


class CheckDomainTransferabilityResponse(BaseModel):
    Transferability: Optional[DomainTransferability] = None


class ContactDetail(BaseModel):
    AddressLine1: Optional[AddressLine] = None
    AddressLine2: Optional[AddressLine] = None
    City_1: Optional[City] = Field(None, alias='City')
    ContactType_1: Optional[ContactType] = Field(None, alias='ContactType')
    CountryCode_1: Optional[CountryCode] = Field(None, alias='CountryCode')
    Email_1: Optional[Email] = Field(None, alias='Email')
    ExtraParams: Optional[ExtraParamList] = None
    Fax: Optional[ContactNumber] = None
    FirstName: Optional[ContactName] = None
    LastName: Optional[ContactName] = None
    OrganizationName: Optional[ContactName] = None
    PhoneNumber: Optional[ContactNumber] = None
    State_1: Optional[State] = Field(None, alias='State')
    ZipCode_1: Optional[ZipCode] = Field(None, alias='ZipCode')


class GetDomainDetailResponse(BaseModel):
    AbuseContactEmail: Optional[Email] = None
    AbuseContactPhone: Optional[ContactNumber] = None
    AdminContact: Optional[ContactDetail] = None
    AdminPrivacy: Optional[Boolean] = None
    AutoRenew: Optional[Boolean] = None
    CreationDate: Optional[Timestamp] = None
    DnsSec: Optional[DNSSec] = None
    DnssecKeys: Optional[DnssecKeyList] = None
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    ExpirationDate: Optional[Timestamp] = None
    Nameservers: Optional[NameserverList] = None
    RegistrantContact: Optional[ContactDetail] = None
    RegistrantPrivacy: Optional[Boolean] = None
    RegistrarName_1: Optional[RegistrarName] = Field(None, alias='RegistrarName')
    RegistrarUrl_1: Optional[RegistrarUrl] = Field(None, alias='RegistrarUrl')
    RegistryDomainId_1: Optional[RegistryDomainId] = Field(
        None, alias='RegistryDomainId'
    )
    Reseller_1: Optional[Reseller] = Field(None, alias='Reseller')
    StatusList: Optional[DomainStatusList] = None
    TechContact: Optional[ContactDetail] = None
    TechPrivacy: Optional[Boolean] = None
    UpdatedDate: Optional[Timestamp] = None
    WhoIsServer: Optional[RegistrarWhoIsServer] = None


class ListDomainsRequest(BaseModel):
    FilterConditions_1: Optional[FilterConditions] = Field(
        None, alias='FilterConditions'
    )
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None
    SortCondition_1: Optional[SortCondition] = Field(None, alias='SortCondition')


class ListOperationsResponse(BaseModel):
    NextPageMarker: Optional[PageMarker] = None
    Operations: Optional[OperationSummaryList] = None


class ListTagsForDomainResponse(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class RegisterDomainRequest(BaseModel):
    AdminContact: ContactDetail
    AutoRenew: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    DurationInYears_1: DurationInYears = Field(..., alias='DurationInYears')
    IdnLangCode: Optional[LangCode] = None
    PrivacyProtectAdminContact: Optional[Boolean] = None
    PrivacyProtectRegistrantContact: Optional[Boolean] = None
    PrivacyProtectTechContact: Optional[Boolean] = None
    RegistrantContact: ContactDetail
    TechContact: ContactDetail


class TransferDomainRequest(BaseModel):
    AdminContact: ContactDetail
    AuthCode: Optional[DomainAuthCode] = None
    AutoRenew: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    DurationInYears_1: DurationInYears = Field(..., alias='DurationInYears')
    IdnLangCode: Optional[LangCode] = None
    Nameservers: Optional[NameserverList] = None
    PrivacyProtectAdminContact: Optional[Boolean] = None
    PrivacyProtectRegistrantContact: Optional[Boolean] = None
    PrivacyProtectTechContact: Optional[Boolean] = None
    RegistrantContact: ContactDetail
    TechContact: ContactDetail


class UpdateDomainContactRequest(BaseModel):
    AdminContact: Optional[ContactDetail] = None
    Consent_1: Optional[Consent] = Field(None, alias='Consent')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    RegistrantContact: Optional[ContactDetail] = None
    TechContact: Optional[ContactDetail] = None
